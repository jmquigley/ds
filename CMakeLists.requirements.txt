include(GNUInstallDirs)
include(FetchContent)

find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)

pkg_search_module(EVENT REQUIRED libevent)

find_library(LIBEVENT_LIB event REQUIRED)
find_library(LIBEVENT_EXTRA event_extra REQUIRED)
find_library(LIBEVENT_PTHREAD_LIB event_pthreads REQUIRED)

find_library(LIBUUID_LIB uuid REQUIRED)

#
# Doxygen generation
#

find_package(Doxygen)
if (DOXYGEN_FOUND)

    # set input and output files
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/doxygen)

    # request to configure the file
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
    message("Doxygen build started")

    # note the option ALL which allows to build the docs together with the application
    add_custom_target(doxygen ALL
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM)

else (DOXYGEN_FOUND)
  message("Doxygen need to be installed to generate the doxygen documentation")

endif (DOXYGEN_FOUND)

#
# Googletest library
#
FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest
    GIT_TAG v1.16.0
)
include_directories(${googletest_SOURCE_DIR}/include)
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
set(INSTALL_GTEST OFF)
FetchContent_MakeAvailable(googletest)
include (CTest)
enable_testing()
